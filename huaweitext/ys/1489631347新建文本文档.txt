%% 禁忌搜索是对局部领域搜索的一种扩展，是一种全局逐步寻优算法。搜索过程可以接受劣解，有较强的爬山能力。
   %邻域结构对收敛性有很大影响。这个程序的结构简单，为SWAP操作。
%%
clear;
city30=[87,7;91,38;83,46;71,44;64,60;68,58;83,69;87,76;74,78;71,71;58,69;54,62;51,67;37,84;41,94;
        2,99;7,64;22,60;25,62;18,54;4,50;13,40;18,40;24,42;25,38;41,26;45,21;44,35;58,35;62,32]; 
%30 cities d'=424.86 by D B Fogel
clf
for i=1:30
    for j=1:30
        DL30(i,j)=((city30(i,1)-city30(j,1))^2+(city30(i,2)-city30(j,2))^2)^0.5; 
    end
end
%%%%%%%%%%%%%%%===========初始参数设置==============
dislist=DL30;
Clist=city30;
CityNum=size(dislist,2);
Tlist=zeros(CityNum);%初始化禁忌表(tabu list)
can_best_N=100;%保留前cl个最好候选解
bsf=Inf;  %初始最优解设为无穷大
%禁忌长度(tabu length) 可更改！
% tl=ceil(CityNum^0.5);%禁忌长度(tabu length)
tl=50;
candidate=ceil(CityNum^2/4);%候选解(candidate),不大于n*(n-1)/2(全部领域解个数);更改领域解个数会影响搜索速度
%% 选择1为起始点
% AA=zeros(1,30);AA(1,1)=1;
% BB=[0,randperm(29)+1];
% S0=AA + BB;
%%
S0=randperm(CityNum);% 随机选取初始解
S=S0;
BSF=S0;
Si=zeros(candidate,CityNum);%预置候选解存储空间?
StopL=80*CityNum;  %停止长度
p=1;
%%%%%%%%%%%%%%%================开始禁忌搜索================
clf;
figure(1);
stop = uicontrol('style','toggle','string','stop','background','white');% 画出运行界面和"STOP"按钮.
tic
%以下为解的迭代过程
while (p<StopL)
    if candidate>CityNum*(CityNum)/2
    disp('候选解个数,大于n*(n-1)/2(全部领域解个数)！ 系统自动退出！');
    candidate=(CityNum*(CityNum)/2)^.5;
    break;
    end
    Temp_dis(p)=F(dislist,S);%计算第p个当前候选解的目标值
    i=1;
    A=zeros(candidate,2);
 %随机交换解中任选2个城市的位置
    while i<=candidate    
        M=CityNum*rand(1,2);
        M=ceil(M);
        if M(1)~=M(2)
            m1=max(M(1),M(2));m2=min(M(1),M(2));
            A(i,1)=m1;
            A(i,2)=m2;
            if i==1
                isdel=0;
            else
                for j=1:i-1
                    if A(i,1)==A(j,1)&&A(i,2)==A(j,2);
                     isdel=1;
                     break;
                    else
                    isdel=0;
                    end
                end
            end
            if ~isdel
               i=i+1;
            else i=i;
            end           
        else i=i;
        end
    end
    CL=Inf*ones(can_best_N,4);%构造4列表,第1列:候选解序号,第2列:候选解对应目标值,第3-4列:记录前面的SWAP
    for i=1:candidate
        Si(i,:)=S; %把候选解放入表Si中,
        Si(i,[A(i,1),A(i,2)])=S([A(i,2),A(i,1)]);
        F(i)=F(dislist,Si(i,:));%计算此解的目标值
        if i<=can_best_N
                CL(i,2)=F(i);
                CL(i,1)=i;
                CL(i,3)=S(A(i,1));
                CL(i,4)=S(A(i,2));  
        else
            for j=1:can_best_N
             if F(i)<CL(j,2)
                  CL(j,2)=F(i);
                  CL(j,1)=i;
                  CL(j,3)=S(A(i,1));
                  CL(j,4)=S(A(i,2));
                  break;
             end           
            end
        end
    end
 %=藐视准则(aspiration criterion)
    if CL(1,2)<bsf  
        bsf=CL(1,2);
       S=Si(CL(1,1),:);       
        BSF=S;
        for m=1:CityNum
            for n=1:CityNum
                if Tlist(m,n)~=0
                Tlist(m,n)=Tlist(m,n)-1;%禁忌次数减少1
                end
            end
        end
        Tlist(CL(1,3),CL(1,4))=tl;
    else 
        for i=1:can_best_N
            if Tlist(CL(i,3),CL(i,4))==0
                S=Si(CL(i,1),:);            
            for m=1:CityNum  %禁忌次数减少1
                for n=1:CityNum
                    if Tlist(m,n)~=0
                        Tlist(m,n)=Tlist(m,n)-1;
                    end
                end
            end     
            Tlist(CL(i,3),CL(i,4))=tl;%设置新解的禁忌长度
            break;
            end
        end
    end  
    p=p+1;  
    Temp_dis_best(p)=bsf;